#include<iostream>
using namespace std;
class node {
public:
    int data;
    node *next;
    node(int da = 0, node* p = NULL) {
        this->data = da;
        this->next = p;
    }
};
class LinkList {
public:
    LinkList() {
        head = tail = NULL;
    }
    ~LinkList() {
        delete head; delete tail;
    }
    void Print();
    void Insert(int da = 0);
    void Delete(int da = 0);
    void Search(int da = 0);
    int GetValue(int position);
    void SetValue(int position, int da);
private:
    node* head, * tail;
    int position;
};
int LinkList::GetValue(int position)
{
    node* p = head;
    if (p==NULL)
    {
        cout << "The List is empty" << endl;
    }
    else
    {
        int pos = 0;
        while (p!=NULL&&pos!=position)
        {
            pos++;
            p = p->next;
        }
        if (p==NULL)
        {
            cout << "No Value" << endl;
        }
        else
        {
            cout << p->data << endl;
        }
    }
    return p->data;
}
void LinkList::SetValue(int position, int da)
{
    node* p = head;
    if (p == NULL) {
        cout << "The List is empty" << endl;
    }
    else
    {
        int pos = 0;
        while (p != NULL && pos != position)
        {
            pos++;
            p = p->next;
        }
        if (p == NULL)
        {
            cout << "No Position" << endl;
        }
        else
        {
            p->data = da;
            cout << "set successful" << endl;
        }
    }
}
void LinkList::Search(int da)
{
    node* p = head;
    if (p == NULL) {
        cout << "The List is empty" << endl;
    }
    int count = 0;
    while (p!=NULL&&p->data!=da)
    {
        p = p->next;
        count++;
    }
    if (p == NULL) {
        cout << "Not found" << endl;
    }
    else
    {
        cout << "positin is " << count << endl;
    }
    
}
void LinkList::Delete(int da) {
    node* p = head, * q = head;
    if (p == NULL) {
        cout << "The List is empty" << endl;
    }
    while (p != NULL && p->data != da) 
    {
        q = p;
        p = p->next;
    }
    q->next = p->next;
    cout << "Delete successful" << endl;
}
void LinkList::Insert(int da)
{
    if (head==NULL)
    {
        head = tail = new node(da);
        head->next = NULL;
        tail->next = NULL;
    }
    else
    {
        node* p = new node(da);
        tail->next = p;
        tail = p;
        tail->next = NULL;
    }
}
void LinkList::Print() {
    node* p = head;
    while (p != NULL) {
        cout << p->data << endl;
        p = p->next;
    }
}
int main()
{
    LinkList L;
    L.Insert(1);
    L.Insert(2);
    L.Insert(3);
    L.Insert(4);
    L.Insert(5);
    L.Insert(6);
    L.Print();
    L.Search(4);
    L.Search(9);
    L.Delete(5);
    L.Print();
    cout << endl;
    L.GetValue(2);
    L.SetValue(3, 9);
    L.Print();
    return 0;
}
